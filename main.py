import telebot
from telebot import types
import sqlite3

from config import BOT_TOKEN
import db_functions

bot = telebot.TeleBot(BOT_TOKEN, skip_pending=True)

var_create_room_name = None
var_join_room_id = None
var_join_room_pass = None
var_join_room_name = None
var_new_admin = None


@bot.message_handler(commands=['start'])
def command_start(message):
    db_functions.create_tables()  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    if db_functions.get_user_name(message):
        menu_start(message)
    else:
        help_text = ''
        with open("about.txt", "r", encoding='UTF8') as f:
            for line in f.readlines():
                help_text += line
        bot.send_message(message.chat.id, help_text, parse_mode='html', disable_web_page_preview=True)
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n<b>–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è "
                                          "(—ç—Ç–æ –∏–º—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å):</b>", parse_mode='html')
        bot.register_next_step_handler(message, create_new_user)


# —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
def create_new_user(message):
    if message.content_type == 'text':
        db_functions.create_new_user(message)
        bot.send_message(message.chat.id, f"–ö–ª–∞—Å—Å–Ω–æ–µ –∏–º—è, <b>{message.text}</b>! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                         parse_mode='html')
        menu_start(message)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>!"
                                          f"<b>–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:</b>",
                         parse_mode='html')
        bot.register_next_step_handler(message, create_new_user)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def menu_start(message):
    name = db_functions.get_user_name(message)
    room = db_functions.get_user_room(message)
    if not room:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É')
        btn2 = types.KeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π')
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\n"
                         f"–°–µ–π—á–∞—Å —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.\n\n"
                         f"<b>–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:</b>",
                         parse_mode='html', reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('*–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
        btn2 = types.KeyboardButton('*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
        markup.row(btn1, btn2)
        btn3 = types.KeyboardButton('*–ú–æ–∏ –¥–æ–ª–≥–∏')
        btn4 = types.KeyboardButton('*–û–±—â–∏–µ –¥–æ–ª–≥–∏')
        markup.row(btn3, btn4)
        btn5 = types.KeyboardButton('*–ì—Ä–∞—Ñ–∏–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π')
        btn6 = types.KeyboardButton('*–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')
        markup.row(btn5, btn6)
        btn7 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã')
        btn8 = types.KeyboardButton('üë§ –õ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
        markup.row(btn7, btn8)
        btn9 = types.KeyboardButton('ü§ñ –û –±–æ—Ç–µ')
        markup.row(btn9)
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\n'
                         f'–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: <b>"{room[0][2]}"</b>\n\n'
                         f'<b>–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:</b>',
                         parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, on_click_menu_start)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
def on_click_menu_start(message):
    if message.text == '/repair':
        command_repair(message)
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É':
        room = db_functions.get_user_room(message)
        if not room:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn)
            bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É!\n"
                                              "<b>–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã "
                                              "(—ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å):</b>",
                             parse_mode='html', reply_markup=markup)
            bot.register_next_step_handler(message, create_new_room_name)
        else:
            bot.send_message(message.chat.id,
                             f'<b>–û—à–∏–±–∫–∞!</b> –ü–æ–∫–∏–Ω—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É <b>"{room[0][2]}"</b>, '
                             f'—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.',
                             parse_mode='html')
            menu_start(message)

    elif message.text == '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π':
        room = db_functions.get_user_room(message)
        if not room:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn)
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏ id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã:</b>",
                             parse_mode='html', reply_markup=markup)
            bot.register_next_step_handler(message, join_new_room_id)
        else:
            bot.send_message(message.chat.id,
                             f'<b>–û—à–∏–±–∫–∞!</b> –ü–æ–∫–∏–Ω—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É <b>"{room[0][2]}"</b>, '
                             f'—á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π.',
                             parse_mode='html')
            menu_start(message)

    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã':
        menu_room_info(message)

    elif message.text == 'ü§ñ –û –±–æ—Ç–µ':
        help_text = ''
        with open("about.txt", "r", encoding='UTF8') as f:
            for line in f.readlines():
                help_text += line
        bot.send_message(message.chat.id, help_text, parse_mode='html', disable_web_page_preview=True)

    elif message.text == '/test':
        command_test(message)
    else:
        bot.send_message(message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        bot.register_next_step_handler(message, on_click_menu_start)


# –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
def menu_room_info(message):
    room = db_functions.get_user_room(message)
    if room:
        admin = db_functions.get_admin_by_room_id(room[0][0])
        users = db_functions.get_users_by_room_id(room[0][0])
        users_list = ''
        for user in users:
            users_list += f'[{user[1]}](t.me/{user[3]})\n'

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∫–æ–º–Ω–∞—Ç—ã
        if room[0][1] == message.from_user.id:
            btn1 = types.KeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã')
            btn2 = types.KeyboardButton('üëë –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞')
            btn3 = types.KeyboardButton('üö´ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É')
            btn4 = types.KeyboardButton('*üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É')
            btn5 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn1)
            markup.add(btn2)
            markup.add(btn3)
            markup.add(btn4)
            markup.add(btn5)
        else:
            btn1 = types.KeyboardButton('üö´ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É')
            btn2 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn1)
            markup.add(btn2)

        bot.send_message(message.chat.id, f'*–ö–æ–º–Ω–∞—Ç–∞ \"{room[0][2]}\"*\n\n'
                                          f'*ID:* `{room[0][0]}`\n'
                                          f'_\(–Ω–∞–∂–º–∏ –Ω–∞ ID, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\)_\n'
                                          f'*–ê–¥–º–∏–Ω –∫–æ–º–Ω–∞—Ç—ã:* [{admin[1]}](t.me/{admin[3]})\n'
                                          f'*–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n'
                                          f'{users_list}\n'
                                          f'*–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:*',
                         parse_mode='MarkdownV2', reply_markup=markup, disable_web_page_preview=True)
        bot.register_next_step_handler(message, on_click_room_info)
    else:
        bot.send_message(message.chat.id,
                         f'<b>–û—à–∏–±–∫–∞!</b> –£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç—ã. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.',
                         parse_mode='html')
        menu_start(message)


# –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
def create_new_room_name(message):
    if message.content_type == 'text':
        global var_create_room_name
        if message.text == '/repair':
            command_repair(message)
        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            menu_start(message)
        else:
            bot.send_message(message.chat.id, f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: \"{message.text}\".\n"
                                              f"<b>–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å "
                                              "(—ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å):</b>", parse_mode='html')
            var_create_room_name = message.text
            bot.register_next_step_handler(message, create_new_room_pass)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>!"
                                          f"<b>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:</b>",
                         parse_mode='html')
        bot.register_next_step_handler(message, create_new_room_name)


# –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
def create_new_room_pass(message):
    if message.content_type == 'text':
        if message.text == '/repair':
            command_repair(message)
        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            menu_start(message)
        else:
            if len(message.text) >= 6:
                db_functions.create_new_room(message, var_create_room_name)
                bot.send_message(message.chat.id,
                                 f"–ö–æ–º–Ω–∞—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>\"{var_create_room_name}\"</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                                 parse_mode='html')
                menu_start(message)
            else:
                bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!\n"
                                                  f"<b>–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å:</b>", parse_mode='html')
                bot.register_next_step_handler(message, create_new_room_pass)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>!"
                                          f"<b>–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å:</b>",
                         parse_mode='html')
        bot.register_next_step_handler(message, create_new_room_pass)


# –≤–≤–æ–¥ id –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
def join_new_room_id(message):
    if message.content_type == 'text':
        global var_join_room_id, var_join_room_name, var_join_room_pass
        if message.text == '/repair':
            command_repair(message)
        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            menu_start(message)
        else:
            room_info = db_functions.check_room_by_id(message)
            if room_info:
                bot.send_message(message.chat.id, f"–ö–æ–º–Ω–∞—Ç–∞ <b>\"{room_info[2]}\"</b> –Ω–∞–π–¥–µ–Ω–∞!\n"
                                                  f"<b>–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–æ–º–Ω–∞—Ç—ã:</b>", parse_mode='html')
                var_join_room_id = message.text
                var_join_room_name = room_info[2]
                var_join_room_pass = room_info[3]
                bot.register_next_step_handler(message, join_new_room_pass)
            else:
                bot.send_message(message.chat.id, f"–ö–æ–º–Ω–∞—Ç–∞ —Å <b>id={message.text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                                                  f"<b>–í–≤–µ–¥–∏ id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã:</b>", parse_mode='html')
                bot.register_next_step_handler(message, join_new_room_id)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—á–µ—Å—Ç–≤–µ id –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>!"
                                          f"<b>–í–≤–µ–¥–∏ id –∫–æ–º–Ω–∞—Ç—ã:</b>",
                         parse_mode='html')
        bot.register_next_step_handler(message, join_new_room_id)


# –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
def join_new_room_pass(message):
    if message.content_type == 'text':
        if message.text == '/repair':
            command_repair(message)
        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            menu_start(message)
        else:
            if db_functions.check_pass(message, var_join_room_pass):
                db_functions.join_user_on_room(message, var_join_room_id)
                bot.send_message(message.chat.id,
                                 f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Ç–µ–ø–µ—Ä—å –≤ –∫–æ–º–Ω–∞—Ç–µ <b>\"{var_join_room_name}\"</b>!",
                                 parse_mode='html')
                menu_start(message)
            else:
                bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n"
                                                  f"<b>–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:</b>", parse_mode='html')
                bot.register_next_step_handler(message, join_new_room_pass)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>!"
                                          f"<b>–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:</b>",
                         parse_mode='html')
        bot.register_next_step_handler(message, join_new_room_pass)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ
def on_click_room_info(message):
    if message.text == '/repair':
        command_repair(message)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        menu_start(message)
    elif message.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã':
        room = db_functions.get_user_room(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup.add(btn)
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: <b>\"{room[0][2]}\"</b>.\n"
                                          f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:</b>",
                         parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(message, edit_room_name)

    elif message.text == 'üö´ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        room = db_functions.get_user_room(message)
        if not room[0][1] == message.from_user.id:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('üö´ –î–∞, —è —Ç–æ—á–Ω–æ —Ö–æ—á—É –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É')
            btn2 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn1)
            markup.add(btn2)
            bot.send_message(message.chat.id, f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É <b>\"{room[0][2]}\"</b>?\n"
                                              f"<b>–¢—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ "
                                              f"—Ç–æ–ª—å–∫–æ –∑–Ω–∞—è –µ–≥–æ id –∏ –ø–∞—Ä–æ–ª—å!</b>",
                             parse_mode='html', reply_markup=markup)
            bot.register_next_step_handler(message, leave_room)
        else:
            bot.send_message(message.chat.id, f"<b>–û—à–∏–±–∫–∞!</b> –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É, "
                                              f"–ø–æ–∫–∞ —è–≤–ª—è–µ—à—å—Å—è –µ–≥–æ –∞–¥–º–∏–Ω–æ–º. "
                                              f"–ß—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É, "
                                              f"–ø–µ—Ä–µ–¥–∞–π —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∫–æ–º–Ω–∞—Ç—ã "
                                              f"–∏–ª–∏ —É–¥–∞–ª–∏ —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.", parse_mode='html')
            bot.register_next_step_handler(message, on_click_room_info)
    elif message.text == 'üëë –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞':
        room = db_functions.get_user_room(message)
        if room[0][1] == message.from_user.id:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            users = db_functions.get_users_by_room_id(room[0][0])
            for user in users:
                if user[0] != message.from_user.id:
                    markup.add(types.KeyboardButton(f'{user[1]} ({user[3]})'))
            btn1 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn1)
            bot.send_message(message.chat.id,
                             f"–í—ã–±–µ—Ä–∏, –∫–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã <b>\"{room[0][2]}\"</b>:",
                             parse_mode='html', reply_markup=markup)
            bot.register_next_step_handler(message, change_room_admin)
        else:
            bot.send_message(message.chat.id, f"<b>–û—à–∏–±–∫–∞!</b> –¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–æ–º –∫–æ–º–Ω–∞—Ç—ã.", parse_mode='html')
            menu_room_info(message)

    # elif message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É':
    #     pass

    else:
        bot.send_message(message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        bot.register_next_step_handler(message, on_click_room_info)


def edit_room_name(message):
    if message.content_type == 'text':
        if message.text == '/repair':
            command_repair(message)
        elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            menu_room_info(message)
        else:
            room = db_functions.get_user_room(message)
            db_functions.edit_room_name(message, room[0][0])
            bot.send_message(message.chat.id,
                             f"–ö–æ–º–Ω–∞—Ç–∞ <b>\"{room[0][2]}\"</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ <b>\"{message.text}\"</b>.\n",
                             parse_mode='html')
            menu_room_info(message)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>!"
                                          f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:</b>",
                         parse_mode='html',
                         )
        bot.register_next_step_handler(message, edit_room_name)


def leave_room(message):
    if message.text == '/repair':
        command_repair(message)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        menu_room_info(message)
    elif message.text == 'üö´ –î–∞, —è —Ç–æ—á–Ω–æ —Ö–æ—á—É –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        room = db_functions.get_user_room(message)
        db_functions.leave_room(message)
        bot.send_message(message.chat.id,
                         f"–¢—ã –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É <b>\"{room[0][2]}\"</b>!",
                         parse_mode='html')
        menu_start(message)
    else:
        bot.send_message(message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        bot.register_next_step_handler(message, leave_room)


def change_room_admin(message):
    global var_new_admin
    if message.text == '/repair':
        command_repair(message)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        menu_room_info(message)
    else:
        room = db_functions.get_user_room(message)
        users = db_functions.get_users_by_room_id(room[0][0])
        for user in users:
            if message.text == f'{user[1]} ({user[3]})':
                var_new_admin = user
                break
        if var_new_admin:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('üëë –î–∞, —è —Ç–æ—á–Ω–æ —Ö–æ—á—É –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞')
            btn2 = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
            markup.add(btn1)
            markup.add(btn2)
            bot.send_message(message.chat.id,
                             f'–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã <b>\"{room[0][2]}\"</b> '
                             f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="t.me/{var_new_admin[3]}">{var_new_admin[1]}</a>?\n'
                             f'–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!',
                             parse_mode='html', reply_markup=markup, disable_web_page_preview=True)
            bot.register_next_step_handler(message, change_room_admin_accept)
        else:
            bot.send_message(message.chat.id, f"<b>–û—à–∏–±–∫–∞!</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                                              f"<b>–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–µ–Ω—é:</b>",
                             parse_mode='html')
            bot.register_next_step_handler(message, change_room_admin)


def change_room_admin_accept(message):
    if message.text == '/repair':
        command_repair(message)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        menu_room_info(message)
    elif message.text == 'üëë –î–∞, —è —Ç–æ—á–Ω–æ —Ö–æ—á—É –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞':
        room = db_functions.get_user_room(message)
        db_functions.change_room_admin(message, room[0][0], var_new_admin)
        bot.send_message(message.chat.id,
                         f'–†–æ–ª—å –∞–¥–º–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã <b>\"{room[0][2]}\"</b> –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ '
                         f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="t.me/{var_new_admin[3]}">{var_new_admin[1]}</a>!',
                         parse_mode='html', disable_web_page_preview=True)
        menu_room_info(message)
    else:
        bot.send_message(message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        bot.register_next_step_handler(message, change_room_admin_accept)


# —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@bot.message_handler(commands=['test'])
def command_test(message):
    conn = sqlite3.connect('chatbot.db')
    cur = conn.cursor()

    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    info = '–¢–∞–±–ª–∏—Ü–∞ "users"\n\n'
    for el in users:
        info += f'id: {el[0]}, name: {el[1]}, room_id: {el[2]}\n\n'
    bot.send_message(message.chat.id, info)

    cur.execute("SELECT * FROM rooms")
    users = cur.fetchall()

    info = '–¢–∞–±–ª–∏—Ü–∞ "rooms"\n\n'
    for el in users:
        info += f'id: {el[0]}, admin_id: {el[1]}, name: {el[2]}, pass: {el[3]}\n\n'
    bot.send_message(message.chat.id, info)

    cur.close()
    conn.close()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã repair
@bot.message_handler(commands=['repair'])
def command_repair(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –±—ã–ª –ø–æ—á–∏–Ω–µ–Ω. <b>–û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</b>',
                     parse_mode='html')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler()
def other_messages(message):
    menu_start(message)


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling(skip_pending=True, timeout=10, long_polling_timeout=5)
